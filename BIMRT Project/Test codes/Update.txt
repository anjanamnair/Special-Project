using System.Linq;
using Xbim.Common;
using Xbim.Ifc;
using Xbim.Ifc4.Interfaces;
using Xbim.Ifc4.Kernel;
using Xbim.Ifc4.ProductExtension;
using Xbim.Ifc4.PropertyResource;
using Xbim.Ifc4.SharedBldgElements;
using Xbim.Ifc4.MeasureResource;

namespace ConsoleApp1
{
    public static class Updation
    {
        public static void UpdateWall() 
        { 
        string ifcFilePath = "C:/Users/Anjana/source/repos/ConsoleApp1/SampleHouse4.ifc";

        using (var model = IfcStore.Open(ifcFilePath))
        {
            using (var txn = model.BeginTransaction("UpdateWallProperties"))
            {
                try
                {
                    
                    var wall = model.Instances.OfType<IfcWall>().FirstOrDefault();

                    if (wall != null)
                    {
                        
                        //UpdateProperty(wall, "Absorptance",0.7);
                       // UpdateProperty(wall, "Heat Transfer Coefficient (U)", 0.235926059936681);
                        UpdateProperty(wall, "Length", 6500);
                        //UpdateProperty(wall, "Thermal mass", 300303.0);
                        UpdateProperty(wall, "ThermalTransmittance", 2.5);
                        //UpdateProperty(wall, "Structural Material", "Concrete Masonry Units _Low Density");

                        
                        txn.Commit();

                        Console.WriteLine("Wall properties updated successfully.");
                    }
                    else
                    {
                        Console.WriteLine("No IfcWall entity found in the model.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error updating wall properties: {ex.Message}");
                    txn.RollBack();
                }
            }

            
            model.SaveAs(ifcFilePath);
        }
    
}

    
    private static void UpdateProperty(IfcWall wall, string propertyName, double propertyValue)
    {
        var propertySets = wall.IsDefinedBy.OfType<IfcRelDefinesByProperties>()
        .Select(rel => rel.RelatingPropertyDefinition as IIfcPropertySet);

        foreach (var propertySet in propertySets)
        {
            if (propertySet != null )
            {
                Console.WriteLine($"Property Set: {propertySet.Name}");

                var properties = propertySet.HasProperties.OfType<IfcPropertySingleValue>();

                foreach (var property in properties)
                {
                    if (property.Name.Equals(propertyName))
                    {
                        property.NominalValue = new IfcPositiveLengthMeasure(propertyValue);
                        Console.WriteLine($"Property Name : {property.Name}");
                        Console.WriteLine($"Property Name :  {property.NominalValue}");
                            
                        }
                }
            }
            else
            {
                Console.WriteLine("Property set is null.");
            }
        }
    }
    }
}